# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from prontogram.models.base_model_ import Model
from prontogram import util


class Message(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sender=None, receiver=None, body=None, send_time=None):  # noqa: E501
        """Message - a model defined in OpenAPI

        :param sender: The sender of this Message.  # noqa: E501
        :type sender: str
        :param receiver: The receiver of this Message.  # noqa: E501
        :type receiver: str
        :param body: The body of this Message.  # noqa: E501
        :type body: str
        :param send_time: The send_time of this Message.  # noqa: E501
        :type send_time: datetime
        """
        self.openapi_types = {
            'sender': str,
            'receiver': str,
            'body': str,
            'send_time': datetime
        }

        self.attribute_map = {
            'sender': 'sender',
            'receiver': 'receiver',
            'body': 'body',
            'send_time': 'send_time'
        }

        self._sender = sender
        self._receiver = receiver
        self._body = body
        self._send_time = send_time

    @classmethod
    def from_dict(cls, dikt) -> 'Message':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Message of this Message.  # noqa: E501
        :rtype: Message
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sender(self):
        """Gets the sender of this Message.


        :return: The sender of this Message.
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this Message.


        :param sender: The sender of this Message.
        :type sender: str
        """
        if sender is None:
            raise ValueError("Invalid value for `sender`, must not be `None`")  # noqa: E501
        if sender is not None and len(sender) < 1:
            raise ValueError("Invalid value for `sender`, length must be greater than or equal to `1`")  # noqa: E501

        self._sender = sender

    @property
    def receiver(self):
        """Gets the receiver of this Message.


        :return: The receiver of this Message.
        :rtype: str
        """
        return self._receiver

    @receiver.setter
    def receiver(self, receiver):
        """Sets the receiver of this Message.


        :param receiver: The receiver of this Message.
        :type receiver: str
        """
        if receiver is None:
            raise ValueError("Invalid value for `receiver`, must not be `None`")  # noqa: E501
        if receiver is not None and len(receiver) < 1:
            raise ValueError("Invalid value for `receiver`, length must be greater than or equal to `1`")  # noqa: E501

        self._receiver = receiver

    @property
    def body(self):
        """Gets the body of this Message.


        :return: The body of this Message.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Message.


        :param body: The body of this Message.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501
        if body is not None and len(body) < 1:
            raise ValueError("Invalid value for `body`, length must be greater than or equal to `1`")  # noqa: E501

        self._body = body

    @property
    def send_time(self):
        """Gets the send_time of this Message.


        :return: The send_time of this Message.
        :rtype: datetime
        """
        return self._send_time

    @send_time.setter
    def send_time(self, send_time):
        """Sets the send_time of this Message.


        :param send_time: The send_time of this Message.
        :type send_time: datetime
        """

        self._send_time = send_time
